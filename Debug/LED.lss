
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b33  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000754  00000000  00000000  00000eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000656  00000000  00000000  00001653  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045f  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f6  00000000  00000000  00002217  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000270d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  64:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Dio_SetPinDirection>:
			                                            case DIO_PORTD:
														loc_status=  GET_BIT(PIND,pin);
			                                                  break;
		}
	                                                          return loc_status;
}
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	a1 f5       	brne	.+104    	; 0xd8 <Dio_SetPinDirection+0x6c>
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	89 f0       	breq	.+34     	; 0x96 <Dio_SetPinDirection+0x2a>
  74:	28 f0       	brcs	.+10     	; 0x80 <Dio_SetPinDirection+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	c9 f0       	breq	.+50     	; 0xac <Dio_SetPinDirection+0x40>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	11 f1       	breq	.+68     	; 0xc2 <Dio_SetPinDirection+0x56>
  7e:	08 95       	ret
  80:	2a b3       	in	r18, 0x1a	; 26
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <Dio_SetPinDirection+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <Dio_SetPinDirection+0x1c>
  90:	82 2b       	or	r24, r18
  92:	8a bb       	out	0x1a, r24	; 26
  94:	08 95       	ret
  96:	27 b3       	in	r18, 0x17	; 23
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <Dio_SetPinDirection+0x36>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <Dio_SetPinDirection+0x32>
  a6:	82 2b       	or	r24, r18
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	08 95       	ret
  ac:	24 b3       	in	r18, 0x14	; 20
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <Dio_SetPinDirection+0x4c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <Dio_SetPinDirection+0x48>
  bc:	82 2b       	or	r24, r18
  be:	84 bb       	out	0x14, r24	; 20
  c0:	08 95       	ret
  c2:	21 b3       	in	r18, 0x11	; 17
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <Dio_SetPinDirection+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <Dio_SetPinDirection+0x5e>
  d2:	82 2b       	or	r24, r18
  d4:	81 bb       	out	0x11, r24	; 17
  d6:	08 95       	ret
  d8:	41 11       	cpse	r20, r1
  da:	37 c0       	rjmp	.+110    	; 0x14a <Dio_SetPinDirection+0xde>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	91 f0       	breq	.+36     	; 0x104 <Dio_SetPinDirection+0x98>
  e0:	28 f0       	brcs	.+10     	; 0xec <Dio_SetPinDirection+0x80>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	d9 f0       	breq	.+54     	; 0x11c <Dio_SetPinDirection+0xb0>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	29 f1       	breq	.+74     	; 0x134 <Dio_SetPinDirection+0xc8>
  ea:	08 95       	ret
  ec:	2a b3       	in	r18, 0x1a	; 26
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <Dio_SetPinDirection+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <Dio_SetPinDirection+0x88>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	8a bb       	out	0x1a, r24	; 26
 102:	08 95       	ret
 104:	27 b3       	in	r18, 0x17	; 23
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <Dio_SetPinDirection+0xa4>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <Dio_SetPinDirection+0xa0>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
 11a:	08 95       	ret
 11c:	24 b3       	in	r18, 0x14	; 20
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <Dio_SetPinDirection+0xbc>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <Dio_SetPinDirection+0xb8>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	84 bb       	out	0x14, r24	; 20
 132:	08 95       	ret
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <Dio_SetPinDirection+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <Dio_SetPinDirection+0xd0>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	81 bb       	out	0x11, r24	; 17
 14a:	08 95       	ret

0000014c <Dio_TogglePin>:

void Dio_TogglePin(u8 port,u8 pin)
{
	switch(port)
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	89 f0       	breq	.+34     	; 0x172 <Dio_TogglePin+0x26>
 150:	28 f0       	brcs	.+10     	; 0x15c <Dio_TogglePin+0x10>
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	c9 f0       	breq	.+50     	; 0x188 <Dio_TogglePin+0x3c>
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	11 f1       	breq	.+68     	; 0x19e <Dio_TogglePin+0x52>
 15a:	08 95       	ret
	{
		case DIO_PORTA:
		TOG_BIT(PORTA,pin);
 15c:	2b b3       	in	r18, 0x1b	; 27
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <Dio_TogglePin+0x1c>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <Dio_TogglePin+0x18>
 16c:	82 27       	eor	r24, r18
 16e:	8b bb       	out	0x1b, r24	; 27
		break;
 170:	08 95       	ret
		case DIO_PORTB:
		TOG_BIT(PORTB,pin);
 172:	28 b3       	in	r18, 0x18	; 24
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <Dio_TogglePin+0x32>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <Dio_TogglePin+0x2e>
 182:	82 27       	eor	r24, r18
 184:	88 bb       	out	0x18, r24	; 24
		break;
 186:	08 95       	ret
		case DIO_PORTC:
		TOG_BIT(PORTC,pin);
 188:	25 b3       	in	r18, 0x15	; 21
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <Dio_TogglePin+0x48>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <Dio_TogglePin+0x44>
 198:	82 27       	eor	r24, r18
 19a:	85 bb       	out	0x15, r24	; 21
		break;
 19c:	08 95       	ret
		case DIO_PORTD:
		TOG_BIT(PORTD,pin);
 19e:	22 b3       	in	r18, 0x12	; 18
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <Dio_TogglePin+0x5e>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <Dio_TogglePin+0x5a>
 1ae:	82 27       	eor	r24, r18
 1b0:	82 bb       	out	0x12, r24	; 18
 1b2:	08 95       	ret

000001b4 <LED_Init>:
	               {
		                  Dio_SetPinValue(LED_Configuration.Port,LED_Configuration.Pin,DIO_PIN_LOW);
	                  }
	                                else if(LED_Configuration.Active_State==ACTIVE_LOW)
	                          {
		                          Dio_SetPinValue(LED_Configuration.Port,LED_Configuration.Pin,DIO_PIN_HIGH);
 1b4:	86 2f       	mov	r24, r22
 1b6:	67 2f       	mov	r22, r23
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_SetPinDirection>
 1be:	08 95       	ret

000001c0 <LED_Toggle>:
 }
 
 
 
void LED_Toggle (LED_Type LED_Configuration)
        {
 1c0:	86 2f       	mov	r24, r22
 1c2:	67 2f       	mov	r22, r23
	               Dio_TogglePin(LED_Configuration.Port,LED_Configuration.Pin);
 1c4:	0e 94 a6 00 	call	0x14c	; 0x14c <Dio_TogglePin>
 1c8:	08 95       	ret

000001ca <main>:
#include "LED_interface.h"


int main(void)
{
    LED_Type LED1={LED_PORTA,LED_PIN0,ACTIVE_HIGH};
 1ca:	f1 2c       	mov	r15, r1
 1cc:	00 e0       	ldi	r16, 0x00	; 0
 1ce:	11 e0       	ldi	r17, 0x01	; 1
		
		  LED_Type LED2={LED_PORTA,LED_PIN1,ACTIVE_HIGH};
 1d0:	91 2c       	mov	r9, r1
 1d2:	aa 24       	eor	r10, r10
 1d4:	a3 94       	inc	r10
 1d6:	bb 24       	eor	r11, r11
 1d8:	b3 94       	inc	r11
			  
			    LED_Type LED3={LED_PORTA,LED_PIN2,ACTIVE_HIGH};
 1da:	c1 2c       	mov	r12, r1
 1dc:	68 94       	set
 1de:	dd 24       	eor	r13, r13
 1e0:	d1 f8       	bld	r13, 1
 1e2:	ee 24       	eor	r14, r14
 1e4:	e3 94       	inc	r14
					
					
					  LED_Init(LED1);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_Init>
					      LED_Init(LED2);
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	71 e0       	ldi	r23, 0x01	; 1
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_Init>
						    LED_Init(LED3);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	72 e0       	ldi	r23, 0x02	; 2
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_Init>
		
    while (1) 
    {
		        s8 counter=1;
 204:	c1 e0       	ldi	r28, 0x01	; 1
						   
						   
		             	if(counter % 1==0)
			             {
				   
				            LED_Toggle(LED1);
 206:	6f 2d       	mov	r22, r15
 208:	70 2f       	mov	r23, r16
 20a:	81 2f       	mov	r24, r17
 20c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LED_Toggle>
			               }
			  
			
			if(counter % 2==0)
 210:	dc 2f       	mov	r29, r28
 212:	c0 fd       	sbrc	r28, 0
 214:	05 c0       	rjmp	.+10     	; 0x220 <main+0x56>
			  {
				  
				LED_Toggle(LED2);
 216:	69 2d       	mov	r22, r9
 218:	7a 2d       	mov	r23, r10
 21a:	8b 2d       	mov	r24, r11
 21c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LED_Toggle>
			 }
			
			               if(counter % 3==0)
 220:	86 e5       	ldi	r24, 0x56	; 86
 222:	c8 02       	muls	r28, r24
 224:	81 2d       	mov	r24, r1
 226:	11 24       	eor	r1, r1
 228:	c7 fd       	sbrc	r28, 7
 22a:	83 95       	inc	r24
 22c:	98 2f       	mov	r25, r24
 22e:	99 0f       	add	r25, r25
 230:	89 0f       	add	r24, r25
 232:	c8 13       	cpse	r28, r24
 234:	05 c0       	rjmp	.+10     	; 0x240 <main+0x76>
			                    {
			                      	LED_Toggle(LED3);
 236:	6c 2d       	mov	r22, r12
 238:	7d 2d       	mov	r23, r13
 23a:	8e 2d       	mov	r24, r14
 23c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LED_Toggle>
			                            }
			
			counter++;
 240:	c1 e0       	ldi	r28, 0x01	; 1
 242:	cd 0f       	add	r28, r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	2f e3       	ldi	r18, 0x3F	; 63
 246:	8d e0       	ldi	r24, 0x0D	; 13
 248:	93 e0       	ldi	r25, 0x03	; 3
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <main+0x80>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0x8a>
 254:	00 00       	nop
 256:	d7 cf       	rjmp	.-82     	; 0x206 <main+0x3c>

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
